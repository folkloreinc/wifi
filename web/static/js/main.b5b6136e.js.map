{"version":3,"file":"static/js/main.b5b6136e.js","mappings":"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","sources":["web/contexts/NetworkContext.jsx","web/components/ConnectForm.jsx","web/components/Status.jsx","web/components/Interface.jsx","web/components/App.jsx","web/index.js"],"sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\nimport PropTypes from 'prop-types';\nimport React, { useContext, useMemo } from 'react';\n\nconst NetworkContext = React.createContext({\n    online: false,\n    networks: [],\n});\n\nexport function useNetworkContext() {\n    return useContext(NetworkContext);\n}\n\nexport function useOnline() {\n    const { online } = useNetworkContext();\n    return online;\n}\n\nexport function useNetworks() {\n    const { networks } = useNetworkContext();\n    return networks;\n}\n\nexport function useCurrentNetwork() {\n    const { networks } = useNetworkContext();\n    return networks.find(({ connected = false }) => connected) || null;\n}\n\nconst propTypes = {\n    online: PropTypes.bool.isRequired,\n    networks: PropTypes.arrayOf(\n        PropTypes.shape({\n            ssid: PropTypes.string,\n            online: PropTypes.bool,\n        }),\n    ).isRequired,\n    children: PropTypes.node.isRequired,\n};\n\nconst defaultProps = {};\n\nexport function NetworkProvider({ online, networks, children }) {\n    const value = useMemo(\n        () => ({\n            online,\n            networks,\n        }),\n        [online, networks],\n    );\n    return <NetworkContext.Provider value={value}>{children}</NetworkContext.Provider>;\n}\n\nNetworkProvider.propTypes = propTypes;\nNetworkProvider.defaultProps = defaultProps;\n\nexport default NetworkContext;\n","/* eslint-disable jsx-a11y/label-has-associated-control, react/jsx-props-no-spreading */\nimport { useForm } from '@folklore/forms';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { useMemo, useCallback } from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nconst propTypes = {\n    online: PropTypes.bool,\n    networks: PropTypes.arrayOf(\n        PropTypes.shape({\n            ssid: PropTypes.string,\n        }),\n    ),\n    className: PropTypes.string,\n};\n\nconst defaultProps = {\n    online: false,\n    networks: [],\n    className: null,\n};\n\nfunction ConnectForm({ online, networks, className }) {\n    const ssids = useMemo(\n        () =>\n            networks.reduce(\n                (names, { ssid }) => (names.indexOf(ssid) === -1 ? [...names, ssid] : names),\n                [],\n            ),\n        [networks],\n    );\n    const getFieldValue = useCallback(({ currentTarget }) => currentTarget.value, []);\n    const { fields, onSubmit, status } = useForm({\n        fields: ['ssid', 'password'],\n        action: '/connect',\n        initialValue:\n            ssids.length > 0\n                ? {\n                      ssid: ssids[0],\n                  }\n                : null,\n        getFieldValue,\n    });\n    return (\n        <div\n            className={classNames([\n                'card',\n                {\n                    [className]: className !== null,\n                },\n            ])}\n        >\n            <div className=\"card-body\">\n                {online ? (\n                    <h4 className=\"mb-4\">\n                        <FormattedMessage defaultMessage=\"Switch Wi-Fi\" description=\"Form title\" />\n                    </h4>\n                ) : (\n                    <h4 className=\"mb-4\">\n                        <FormattedMessage\n                            defaultMessage=\"Connect to Wi-Fi\"\n                            description=\"Form title\"\n                        />\n                    </h4>\n                )}\n                <form action=\"/connect\" method=\"post\" onSubmit={onSubmit}>\n                    <div className=\"mb-3\">\n                        <label className=\"form-label\" htmlFor=\"ssid\">\n                            <FormattedMessage defaultMessage=\"Network\" description=\"Field label\" />\n                        </label>\n                        <select\n                            name=\"ssid\"\n                            className=\"form-control form-control-lg\"\n                            required\n                            {...fields.ssid}\n                        >\n                            {ssids.map((ssid) => (\n                                <option value={ssid}>{ssid}</option>\n                            ))}\n                        </select>\n                    </div>\n                    <div className=\"mb-4\">\n                        <label className=\"form-label\" htmlFor=\"password\">\n                            <FormattedMessage defaultMessage=\"Password\" description=\"Field label\" />\n                        </label>\n                        <input\n                            type=\"text\"\n                            name=\"password\"\n                            className=\"form-control form-control-lg\"\n                            required\n                            {...fields.password}\n                        />\n                    </div>\n                    <div>\n                        <button\n                            type=\"submit\"\n                            className=\"btn btn-lg btn-primary\"\n                            disabled={status === 'loading'}\n                        >\n                            <FormattedMessage defaultMessage=\"Connect\" description=\"Button label\" />\n                        </button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nConnectForm.propTypes = propTypes;\nConnectForm.defaultProps = defaultProps;\n\nexport default ConnectForm;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nconst propTypes = {\n    networks: PropTypes.arrayOf(\n        PropTypes.shape({\n            ssid: PropTypes.string,\n            connected: PropTypes.bool,\n        }),\n    ),\n    online: PropTypes.bool,\n    className: PropTypes.string,\n};\n\nconst defaultProps = {\n    networks: [],\n    online: true,\n    className: null,\n};\n\nfunction Status({ online, networks, className }) {\n    const { ssid: connectedNetwork = null } =\n        networks.find(({ connected = false }) => connected) || {};\n    return (\n        <div\n            className={classNames([\n                'card',\n                {\n                    'text-bg-success': online,\n                    'text-bg-danger': !online,\n                    [className]: className !== null,\n                },\n            ])}\n        >\n            <div className=\"card-body text-center\">\n                <div className=\"h4 m-4 text-bold\">\n                    <i\n                        className={classNames([\n                            'bi',\n                            'me-4',\n                            {\n                                'bi-hand-thumbs-up': online,\n                                'bi-x-circle': !online,\n                            },\n                        ])}\n                    />\n                    {online ? (\n                        <FormattedMessage\n                            defaultMessage=\"Connected to Wi-Fi {network}\"\n                            description=\"Status label\"\n                            values={{\n                                network: connectedNetwork,\n                            }}\n                        />\n                    ) : (\n                        <FormattedMessage\n                            defaultMessage=\"Not connected\"\n                            description=\"Status label\"\n                        />\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n}\n\nStatus.propTypes = propTypes;\nStatus.defaultProps = defaultProps;\n\nexport default Status;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useOnline, useNetworks } from '../contexts/NetworkContext';\nimport ConnectForm from './ConnectForm';\nimport Status from './Status';\n\nimport '../styles/styles.scss';\n\nconst propTypes = {\n    className: PropTypes.string,\n};\n\nconst defaultProps = {\n    className: null,\n};\n\nfunction Interface({ className }) {\n    const online = useOnline();\n    const networks = useNetworks();\n    return (\n        <div\n            className={classNames([\n                'container',\n                {\n                    [className]: className !== null,\n                },\n            ])}\n        >\n            <div className=\"row justify-content-center mt-4\">\n                <div className=\"col-lg-6\">\n                    <Status online={online} networks={networks} />\n                </div>\n            </div>\n            <div className=\"row justify-content-center mt-4\">\n                <div className=\"col-lg-6\">\n                    <ConnectForm networks={networks} />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nInterface.propTypes = propTypes;\nInterface.defaultProps = defaultProps;\n\nexport default Interface;\n","import PropTypes from 'prop-types';\nimport React, { useState, useEffect } from 'react';\nimport { IntlProvider } from 'react-intl';\nimport io from 'socket.io-client';\n\nimport { NetworkProvider } from '../contexts/NetworkContext';\nimport Interface from './Interface';\n\nimport '../styles/styles.scss';\n\nconst socket = io();\n\nconst propTypes = {\n    networks: PropTypes.arrayOf(\n        PropTypes.shape({\n            ssid: PropTypes.string,\n        }),\n    ),\n    online: PropTypes.bool,\n    locale: PropTypes.string,\n};\n\nconst defaultProps = {\n    networks: [],\n    online: false,\n    locale: 'en',\n};\n\nfunction App({ online: initialOnline, networks: initialNetworks, locale }) {\n    const [online, setOnline] = useState(initialOnline);\n    const [networks, setNetworks] = useState(initialNetworks);\n\n    useEffect(() => {\n        socket.on('status', ({ online: newOnline, networks: newNetworks }) => {\n            setOnline(newOnline);\n            setNetworks(newNetworks);\n        });\n\n        socket.on('online', (newOnline) => {\n            setOnline(newOnline);\n        });\n\n        socket.on('networks', (newNetworks) => {\n            setNetworks(newNetworks);\n        });\n\n        return () => {\n            socket.off('status');\n            socket.off('online');\n            socket.off('networks');\n        };\n    }, [setOnline, setNetworks]);\n\n    return (\n        <NetworkProvider online={online} networks={networks}>\n            <IntlProvider locale={locale}>\n                <Interface />\n            </IntlProvider>\n        </NetworkProvider>\n    );\n}\n\nApp.propTypes = propTypes;\nApp.defaultProps = defaultProps;\n\nexport default App;\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './components/App';\n\nconst container = document.getElementById('app');\nconst app = React.createElement(App, window.props || {});\nconst root = createRoot(container);\nroot.render(app);\n"],"names":["NetworkContext","React","online","networks","useNetworkContext","useContext","propTypes","PropTypes","ssid","isRequired","children","NetworkProvider","value","useMemo","Provider","defaultProps","className","ConnectForm","ssids","reduce","names","indexOf","getFieldValue","useCallback","currentTarget","useForm","fields","action","initialValue","length","onSubmit","status","classNames","method","htmlFor","name","required","map","type","password","disabled","connected","Status","find","connectedNetwork","values","network","Interface","socket","io","locale","App","initialOnline","initialNetworks","useState","setOnline","setNetworks","useEffect","on","newOnline","newNetworks","off","container","document","getElementById","app","window","props","createRoot","render"],"sourceRoot":""}