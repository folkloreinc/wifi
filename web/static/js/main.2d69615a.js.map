{"version":3,"file":"static/js/main.2d69615a.js","mappings":"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","sources":["web/contexts/NetworkContext.jsx","web/components/ConnectForm.jsx","web/components/Status.jsx","web/components/Interface.jsx","web/components/App.jsx","web/index.js"],"sourcesContent":["/* eslint-disable react/jsx-props-no-spreading */\nimport PropTypes from 'prop-types';\nimport React, { useContext, useMemo } from 'react';\n\nconst NetworkContext = React.createContext({\n    online: false,\n    networks: [],\n});\n\nexport function useNetworkContext() {\n    return useContext(NetworkContext);\n}\n\nexport function useOnline() {\n    const { online } = useNetworkContext();\n    return online;\n}\n\nexport function useNetworks() {\n    const { networks } = useNetworkContext();\n    return networks;\n}\n\nexport function useCurrentNetwork() {\n    const { networks } = useNetworkContext();\n    return networks.find(({ connected = false }) => connected) || null;\n}\n\nconst propTypes = {\n    online: PropTypes.bool.isRequired,\n    networks: PropTypes.arrayOf(\n        PropTypes.shape({\n            ssid: PropTypes.string,\n            online: PropTypes.bool,\n        }),\n    ).isRequired,\n    children: PropTypes.node.isRequired,\n};\n\nconst defaultProps = {};\n\nexport function NetworkProvider({ online, networks, children }) {\n    const value = useMemo(\n        () => ({\n            online,\n            networks,\n        }),\n        [online, networks],\n    );\n    return <NetworkContext.Provider value={value}>{children}</NetworkContext.Provider>;\n}\n\nNetworkProvider.propTypes = propTypes;\nNetworkProvider.defaultProps = defaultProps;\n\nexport default NetworkContext;\n","/* eslint-disable jsx-a11y/label-has-associated-control, react/jsx-props-no-spreading */\nimport { useForm } from '@folklore/forms';\nimport classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React, { useMemo, useCallback } from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nconst propTypes = {\n    online: PropTypes.bool,\n    networks: PropTypes.arrayOf(\n        PropTypes.shape({\n            ssid: PropTypes.string,\n        }),\n    ),\n    onClickRefresh: PropTypes.func,\n    className: PropTypes.string,\n};\n\nconst defaultProps = {\n    online: false,\n    networks: [],\n    onClickRefresh: null,\n    className: null,\n};\n\nfunction ConnectForm({ online, networks, className, onClickRefresh }) {\n    const ssids = useMemo(\n        () =>\n            networks.reduce(\n                (names, { ssid }) => (names.indexOf(ssid) === -1 ? [...names, ssid] : names),\n                [],\n            ),\n        [networks],\n    );\n    const getFieldValue = useCallback(({ currentTarget }) => currentTarget.value, []);\n    const { fields, onSubmit, status } = useForm({\n        fields: ['ssid', 'password'],\n        action: '/connect',\n        initialValue:\n            ssids.length > 0\n                ? {\n                      ssid: ssids[0],\n                  }\n                : null,\n        getFieldValue,\n    });\n    return (\n        <div\n            className={classNames([\n                'card',\n                {\n                    [className]: className !== null,\n                },\n            ])}\n        >\n            <div className=\"card-body\">\n                {online ? (\n                    <h4 className=\"mb-4\">\n                        <FormattedMessage defaultMessage=\"Switch Wi-Fi\" description=\"Form title\" />\n                    </h4>\n                ) : (\n                    <h4 className=\"mb-4\">\n                        <FormattedMessage\n                            defaultMessage=\"Connect to Wi-Fi\"\n                            description=\"Form title\"\n                        />\n                    </h4>\n                )}\n                <form action=\"/connect\" method=\"post\" onSubmit={onSubmit}>\n                    <div className=\"mb-3\">\n                        <label className=\"form-label\" htmlFor=\"ssid\">\n                            <FormattedMessage\n                                defaultMessage=\"Wi-Fi network:\"\n                                description=\"Field label\"\n                            />\n                        </label>\n                        <div className=\"input-group\">\n                            <select\n                                name=\"ssid\"\n                                className=\"form-control form-control-lg\"\n                                required\n                                disabled={ssids.length === 0}\n                                {...fields.ssid}\n                            >\n                                {ssids.length > 0 ? (\n                                    ssids.map((ssid) => (\n                                        <option value={ssid} key={`option-${ssid}`}>\n                                            {ssid}\n                                        </option>\n                                    ))\n                                ) : (\n                                    <option value=\"\">No network found.</option>\n                                )}\n                            </select>\n                            <button\n                                type=\"button\"\n                                className=\"btn btn-outline-secondary\"\n                                onClick={onClickRefresh}\n                            >\n                                <i className=\"bi bi-arrow-clockwise\" />\n                            </button>\n                        </div>\n                    </div>\n                    <div className=\"mb-4\">\n                        <label className=\"form-label\" htmlFor=\"password\">\n                            <FormattedMessage\n                                defaultMessage=\"Wi-Fi password:\"\n                                description=\"Field label\"\n                            />\n                        </label>\n                        <input\n                            type=\"text\"\n                            name=\"password\"\n                            className=\"form-control form-control-lg\"\n                            required\n                            {...fields.password}\n                        />\n                    </div>\n                    <div>\n                        <button\n                            type=\"submit\"\n                            className=\"btn btn-lg btn-primary\"\n                            disabled={status === 'loading'}\n                        >\n                            <FormattedMessage defaultMessage=\"Connect\" description=\"Button label\" />\n                        </button>\n                    </div>\n                </form>\n            </div>\n        </div>\n    );\n}\n\nConnectForm.propTypes = propTypes;\nConnectForm.defaultProps = defaultProps;\n\nexport default ConnectForm;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { FormattedMessage } from 'react-intl';\n\nconst propTypes = {\n    networks: PropTypes.arrayOf(\n        PropTypes.shape({\n            ssid: PropTypes.string,\n            connected: PropTypes.bool,\n        }),\n    ),\n    online: PropTypes.bool,\n    className: PropTypes.string,\n};\n\nconst defaultProps = {\n    networks: [],\n    online: true,\n    className: null,\n};\n\nfunction Status({ online, networks, className }) {\n    const { ssid: connectedNetwork = null } =\n        networks.find(({ connected = false }) => connected) || {};\n    return (\n        <div\n            className={classNames([\n                'card',\n                {\n                    'text-bg-success': online,\n                    'text-bg-warning': !online,\n                    [className]: className !== null,\n                },\n            ])}\n        >\n            <div className=\"card-body text-center\">\n                <div\n                    className={classNames([\n                        {\n                            h5: online,\n                            h6: !online,\n                            'm-4': online,\n                            'm-2': !online,\n                        },\n                    ])}\n                >\n                    <i\n                        className={classNames([\n                            'bi',\n                            'me-4',\n                            {\n                                'bi-hand-thumbs-up': online,\n                                'bi-x-circle': !online,\n                            },\n                        ])}\n                    />\n                    {online ? (\n                        <FormattedMessage\n                            defaultMessage=\"Connected to Internet\"\n                            description=\"Status label\"\n                        />\n                    ) : (\n                        <FormattedMessage\n                            defaultMessage=\"Device not connected to Internet\"\n                            description=\"Status label\"\n                        />\n                    )}\n                </div>\n                {online ? <p>Wi-Fi: {connectedNetwork}</p> : null}\n            </div>\n        </div>\n    );\n}\n\nStatus.propTypes = propTypes;\nStatus.defaultProps = defaultProps;\n\nexport default Status;\n","import classNames from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\n\nimport { useOnline, useNetworks } from '../contexts/NetworkContext';\nimport ConnectForm from './ConnectForm';\nimport Status from './Status';\n\nimport '../styles/styles.scss';\n\nconst propTypes = {\n    className: PropTypes.string,\n    onRefreshNetworks: PropTypes.func,\n};\n\nconst defaultProps = {\n    className: null,\n    onRefreshNetworks: null,\n};\n\nfunction Interface({ className, onRefreshNetworks }) {\n    const online = useOnline();\n    const networks = useNetworks();\n    return (\n        <div\n            className={classNames([\n                'container',\n                {\n                    [className]: className !== null,\n                },\n            ])}\n        >\n            <div className=\"row justify-content-center mt-4\">\n                <div\n                    className={classNames([\n                        'col-lg-5',\n                        'd-flex',\n                        {\n                            'flex-column-reverse': !online,\n                            'flex-column': online,\n                        },\n                    ])}\n                >\n                    <Status\n                        online={online}\n                        networks={networks}\n                        className={classNames([\n                            {\n                                'mb-4': online,\n                                'mt-4': !online,\n                            },\n                        ])}\n                    />\n                    <ConnectForm networks={networks} onClickRefresh={onRefreshNetworks} />\n                </div>\n            </div>\n        </div>\n    );\n}\n\nInterface.propTypes = propTypes;\nInterface.defaultProps = defaultProps;\n\nexport default Interface;\n","import { getJSON } from '@folklore/fetch';\nimport PropTypes from 'prop-types';\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { IntlProvider } from 'react-intl';\nimport io from 'socket.io-client';\n\nimport { NetworkProvider } from '../contexts/NetworkContext';\nimport Interface from './Interface';\n\nimport '../styles/styles.scss';\n\nconst socket = io(process.env.NODE_ENV === 'development' ? 'http://localhost:8001' : undefined);\n\nconst propTypes = {\n    networks: PropTypes.arrayOf(\n        PropTypes.shape({\n            ssid: PropTypes.string,\n        }),\n    ),\n    online: PropTypes.bool,\n    locale: PropTypes.string,\n    translations: PropTypes.objectOf(\n        PropTypes.arrayOf(\n            PropTypes.shape({\n                type: PropTypes.number,\n                value: PropTypes.string,\n            }),\n        ),\n    ),\n};\n\nconst defaultProps = {\n    networks: [],\n    online: false,\n    locale: 'en',\n    translations: {},\n};\n\nfunction App({ online: initialOnline, networks: initialNetworks, locale, translations }) {\n    const [online, setOnline] = useState(initialOnline);\n    const [networks, setNetworks] = useState(initialNetworks);\n\n    const onRefreshNetworks = useCallback(() => {\n        getJSON('/networks').then((newNetworks) => setNetworks(newNetworks));\n    }, [setNetworks]);\n\n    useEffect(() => {\n        socket.on('status', ({ online: newOnline, networks: newNetworks }) => {\n            setOnline(newOnline);\n            setNetworks(newNetworks);\n        });\n\n        socket.on('online', (newOnline) => {\n            setOnline(newOnline);\n        });\n\n        socket.on('networks', (newNetworks) => {\n            setNetworks(newNetworks);\n        });\n\n        return () => {\n            socket.off('status');\n            socket.off('online');\n            socket.off('networks');\n        };\n    }, [setOnline, setNetworks]);\n\n    return (\n        <NetworkProvider online={online} networks={networks}>\n            <IntlProvider locale={locale} messages={translations}>\n                <Interface onRefreshNetworks={onRefreshNetworks} />\n            </IntlProvider>\n        </NetworkProvider>\n    );\n}\n\nApp.propTypes = propTypes;\nApp.defaultProps = defaultProps;\n\nexport default App;\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\n\nimport App from './components/App';\n\nconst container = document.getElementById('app');\nconst app = React.createElement(App, window.props || {});\nconst root = createRoot(container);\nroot.render(app);\n"],"names":["NetworkContext","React","online","networks","useNetworkContext","useContext","propTypes","PropTypes","ssid","isRequired","children","NetworkProvider","value","useMemo","Provider","defaultProps","onClickRefresh","className","ConnectForm","ssids","reduce","names","indexOf","getFieldValue","useCallback","currentTarget","useForm","fields","action","initialValue","length","onSubmit","status","classNames","method","htmlFor","name","required","disabled","map","type","onClick","password","connected","Status","find","connectedNetwork","h5","h6","onRefreshNetworks","Interface","socket","io","undefined","locale","translations","App","initialOnline","initialNetworks","useState","setOnline","setNetworks","getJSON","then","newNetworks","useEffect","on","newOnline","off","messages","container","document","getElementById","app","window","props","createRoot","render"],"sourceRoot":""}